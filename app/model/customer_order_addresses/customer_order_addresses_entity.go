// ==========================================================================
// This is auto-generated by gf cli tool. DO NOT EDIT THIS FILE MANUALLY.
// ==========================================================================

package customer_order_addresses

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table customer_order_addresses.
type Entity struct {
    Id             uint        `orm:"id,primary"     json:"id"`             //               
    OrderId        string      `orm:"order_id"       json:"order_id"`       //               
    Firstname      string      `orm:"firstname"      json:"firstname"`      // 姓            
    Lastname       string      `orm:"lastname"       json:"lastname"`       // 名            
    Country        string      `orm:"country"        json:"country"`        // 国家          
    CountryCode    string      `orm:"country_code"   json:"country_code"`   //               
    State          string      `orm:"state"          json:"state"`          // 州/省份/区域  
    City           string      `orm:"city"           json:"city"`           // 城市          
    Street         string      `orm:"street"         json:"street"`         // 详细地址      
    StreetNumber   string      `orm:"street_number"  json:"street_number"`  //               
    Suburb         string      `orm:"suburb"         json:"suburb"`         // apt/郊区地址  
    Zipcode        string      `orm:"zipcode"        json:"zipcode"`        // 邮政编码      
    Areacode       string      `orm:"areacode"       json:"areacode"`       // 区号          
    Phone          string      `orm:"phone"          json:"phone"`          // 电话          
    Email          string      `orm:"email"          json:"email"`          //               
    Identification string      `orm:"identification" json:"identification"` //               
    CreatedAt      *gtime.Time `orm:"created_at"     json:"created_at"`     //               
    DeletedAt      *gtime.Time `orm:"deleted_at"     json:"deleted_at"`     //               
    UpdatedAt      *gtime.Time `orm:"updated_at"     json:"updated_at"`     //               
    MessageId      string      `orm:"message_id"     json:"message_id"`     //               
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}