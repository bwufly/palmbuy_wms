// ==========================================================================
// This is auto-generated by gf cli tool. DO NOT EDIT THIS FILE MANUALLY.
// ==========================================================================

package customer_order_products

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table customer_order_products.
type Entity struct {
    Id                int         `orm:"id,primary"          json:"id"`                  //                    
    OrderId           string      `orm:"order_id"            json:"order_id"`            //                    
    ProductId         int         `orm:"product_id"          json:"product_id"`          //                    
    SkuId             int         `orm:"sku_id"              json:"sku_id"`              //                    
    Abbreviation      string      `orm:"abbreviation"        json:"abbreviation"`        //                    
    PicValueId        int         `orm:"pic_value_id"        json:"pic_value_id"`        //                    
    OriginPrice       float64     `orm:"origin_price"        json:"origin_price"`        // 原商品单价         
    UnitPrice         float64     `orm:"unit_price"          json:"unit_price"`          // 最终商品单价       
    PreferentialPrice float64     `orm:"preferential_price"  json:"preferential_price"`  // 促销活动优惠价     
    CodePrice         float64     `orm:"code_price"          json:"code_price"`          // 优惠券的优惠金额   
    Num               int         `orm:"num"                 json:"num"`                 // 购买数量           
    RefundNum         int         `orm:"refund_num"          json:"refund_num"`          // 退货数量           
    TotalPrice        float64     `orm:"total_price"         json:"total_price"`         // 单个商品总价       
    MultiPromotionId  int         `orm:"multi_promotion_id"  json:"multi_promotion_id"`  // 促销活动id         
    SinglePromotionId int         `orm:"single_promotion_id" json:"single_promotion_id"` // 单品促销ID         
    StockStatus       int         `orm:"stock_status"        json:"stock_status"`        // 1:缺货；0：配送中  
    IsGift            int         `orm:"is_gift"             json:"is_gift"`             //                    
    LockStock         uint        `orm:"lock_stock"          json:"lock_stock"`          // 锁定库存           
    DeletedAt         *gtime.Time `orm:"deleted_at"          json:"deleted_at"`          //                    
    CreatedAt         *gtime.Time `orm:"created_at"          json:"created_at"`          //                    
    UpdatedAt         *gtime.Time `orm:"updated_at"          json:"updated_at"`          //                    
    MessageId         string      `orm:"message_id"          json:"message_id"`          //                    
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}