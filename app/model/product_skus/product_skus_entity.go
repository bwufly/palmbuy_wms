// ==========================================================================
// This is auto-generated by gf cli tool. DO NOT EDIT THIS FILE MANUALLY.
// ==========================================================================

package product_skus

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table product_skus.
type Entity struct {
    Id            uint        `orm:"id,primary"     json:"id"`             // 自增ID        
    ProductId     uint        `orm:"product_id"     json:"product_id"`     // 商品ID        
    PicValueId    uint        `orm:"pic_value_id"   json:"pic_value_id"`   // 图片属性值ID  
    ValueIds      string      `orm:"value_ids"      json:"value_ids"`      //               
    SupplyPrice   float64     `orm:"supply_price"   json:"supply_price"`   // 供货价        
    PurchasePrice float64     `orm:"purchase_price" json:"purchase_price"` // 采购价        
    OriginPrice   float64     `orm:"origin_price"   json:"origin_price"`   // 原价          
    Price         float64     `orm:"price"          json:"price"`          //               
    SupplierCode  string      `orm:"supplier_code"  json:"supplier_code"`  //               
    Weight        float64     `orm:"weight"         json:"weight"`         // 重量          
    SupplierSize  string      `orm:"supplier_size"  json:"supplier_size"`  //               
    Icon          string      `orm:"icon"           json:"icon"`           //               
    CreatedAt     *gtime.Time `orm:"created_at"     json:"created_at"`     //               
    DeletedAt     *gtime.Time `orm:"deleted_at"     json:"deleted_at"`     //               
    UpdatedAt     *gtime.Time `orm:"updated_at"     json:"updated_at"`     //               
    MessageId     string      `orm:"message_id"     json:"message_id"`     //               
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}