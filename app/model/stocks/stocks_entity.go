// ==========================================================================
// This is auto-generated by gf cli tool. DO NOT EDIT THIS FILE MANUALLY.
// ==========================================================================

package stocks

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table stocks.
type Entity struct {
    Id               int         `orm:"id,primary"         json:"id"`                 //                 
    ProductId        int         `orm:"product_id"         json:"product_id"`         //                 
    SkuId            int         `orm:"sku_id"             json:"sku_id"`             //                 
    LogicOccupyStock int         `orm:"logic_occupy_stock" json:"logic_occupy_stock"` // 逻辑占用库存    
    LogicRemainStock int         `orm:"logic_remain_stock" json:"logic_remain_stock"` // 逻辑剩余库存    
    PhysicsStock     int         `orm:"physics_stock"      json:"physics_stock"`      // 在架库存        
    PreJobStock      int         `orm:"pre_job_stock"      json:"pre_job_stock"`      // 预作业库存      
    StorageStock     int         `orm:"storage_stock"      json:"storage_stock"`      // 入库作业中库存  
    OutboundStock    int         `orm:"outbound_stock"     json:"outbound_stock"`     // 出库作业库存    
    SafeStock        int         `orm:"safe_stock"         json:"safe_stock"`         // 安全库存        
    NotReceivedStock int         `orm:"not_received_stock" json:"not_received_stock"` // 已推未到        
    BalanceStock     int         `orm:"balance_stock"      json:"balance_stock"`      // 结余量          
    LockStock        uint        `orm:"lock_stock"         json:"lock_stock"`         // 锁定库存        
    ChoiceNotShip    uint        `orm:"choice_not_ship"    json:"choice_not_ship"`    // 待发备货数      
    CreatedAt        *gtime.Time `orm:"created_at"         json:"created_at"`         //                 
    UpdatedAt        *gtime.Time `orm:"updated_at"         json:"updated_at"`         //                 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}